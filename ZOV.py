__version__ = (1, 0, 4)
# meta banner: "üá∑üá∫"
# meta developer: @mikhaylodm & IDEA="@bleizix & fork by @mihailkotovski & fork fork by @nenfiz"
# scope: hikka_only
# scope: hikka_min 1.2.10

import logging
import random
import re
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class NiceMessagesMod(loader.Module):
    """–Ø –°–ö–ê–ó–ê–õ –ì–û–ô–î–ê–ê–ê–ê"""

    strings = {
        "name": "ZZZ ZOVV",
        "_cls_doc": "–Ø –°–ö–ê–ó–ê–õ –ì–û–ô–î–ê–ê–ê–ê",
        "config_enable_doc": "–í–ö–õ–Æ–ß–ò–¢–¨ –ì–û–ô–î–£–£–£–£",
        "config_effects_frequency_doc": "–ß–∞—Å—Ç–æ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (ZOV, –ì–û–ô–î–ê, üá∑üá∫, üî•, ‚ù§Ô∏è‚Äçüî•, ü§ôüèª, üí®)",
        "config_enable_emojis_doc": "–í–∫–ª—é—á–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ üî•‚ù§Ô∏è‚Äçüî•ü§ôüèªüí®",
        "config_enable_slang_doc": "–ü–∞—Ü–∞–Ω—Å–∫–∏–π –º–∞—Ç–µ—Ä–Ω—ã–π —Å–ª–µ–Ω–≥ (–ø—Ä–∏–≤–µ—Ç ‚Üí –∑–¥–∞—Ä–æ–≤–∞, –ø–∏–∑–¥–µ—Ü ‚Üí —Ç—Ä—ã–Ω–¥–µ—Ü)",
        "error_message": "–û–π-–æ–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–æ –ø–∏–∑–¥–µ—Ü—É... –í–æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª: {}",
    }

    strings_ru = {
        "_cls_doc": "–Ø –°–ö–ê–ó–ê–õ –ì–û–ô–î–ê–ê–ê–ê",
        "config_enable_doc": "–í–ö–õ–Æ–ß–ò–¢–¨ –ì–û–ô–î–£–£–£–£",
        "config_effects_frequency_doc": "–ß–∞—Å—Ç–æ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (ZOV, –ì–û–ô–î–ê, üá∑üá∫, üî•, ‚ù§Ô∏è‚Äçüî•, ü§ôüèª, üí®)",
        "config_enable_emojis_doc": "–í–∫–ª—é—á–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ üî•‚ù§Ô∏è‚Äçüî•ü§ôüèªüí®",
        "config_enable_slang_doc": "–ü–∞—Ü–∞–Ω—Å–∫–∏–π –º–∞—Ç–µ—Ä–Ω—ã–π —Å–ª–µ–Ω–≥ (–ø—Ä–∏–≤–µ—Ç ‚Üí –∑–¥–∞—Ä–æ–≤–∞, –ø–∏–∑–¥–µ—Ü ‚Üí —Ç—Ä—ã–Ω–¥–µ—Ü)",
        "error_message": "–û–π-–æ–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–æ –ø–∏–∑–¥–µ—Ü—É... –í–æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª: {}",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enable",
                True,
                lambda: self.strings("config_enable_doc"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "effects_frequency",
                2,
                lambda: self.strings("config_effects_frequency_doc"),
                validator=loader.validators.Integer(minimum=0, maximum=4),
            ),
            loader.ConfigValue(
                "enable_emojis",
                True,
                lambda: self.strings("config_enable_emojis_doc"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "enable_slang",
                False,
                lambda: self.strings("config_enable_slang_doc"),
                validator=loader.validators.Boolean(),
            ),
        )
        
        self.emojis = ["üî•", "‚ù§Ô∏è‚Äçüî•", "ü§ôüèªü§ôüèªü§ôüèª", "üí®"]
        self.flags = ["üá∑üá∫"]
        self.suffixes = ["ZOV", "–ì–û–ô–î–ê", "üÜâüÖæüÜÖ", "ìÜ©∆µÍùäÍùûìÜ™", "·∂ª·¥º‚±Ω", "ÍßÅ‚Ä¢‚äπŸ≠ZOVŸ≠‚äπ‚Ä¢ÍßÇ", "GÃ∂OÃ∂YÃ∂DÃ∂AÃ∂", "„ÄúG‚àøO‚àøY‚àøD‚àøA„Äú"]
        self.extended_exclamations = ["!!!"]
        self.slang_dict = {
            "–ø—Ä–∏–≤–µ—Ç": "–∑–¥–∞—Ä–æ–≤–∞", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π": "–∑–¥–∞—Ä–æ–≤", "–∫–∞–∫": "—á—ë", "—Ö–æ—Ä–æ—à–æ": "–∑–∞–µ–±–∏—Å—å",
            "–æ—Ç–ª–∏—á–Ω–æ": "–ø–∏–∑–¥–µ—Ü –∫–∞–∫", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ": "–Ω–æ—Ä–º–∞—Å", "–ø–ª–æ—Ö–æ": "–≤—Å—Ä–∞—Ç–æ",
            "–¥—Ä—É–≥": "–±—Ä–∞—Ç–∞–Ω", "–ø–æ–∫–∞": "–≤–∞–ª–∏", "–¥–∞": "–∫–∞–Ω–µ—à", "–Ω–µ—Ç": "–Ω–∞—Ö—É–π –∏–¥–∏",
            "—Å–ø–∞—Å–∏–±–æ": "—Ä–µ—Å–ø–µ–∫—Ç", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞": "–ø–æ –±—Ä–∞—Ç—Å–∫–∏", "–∏–∑–≤–∏–Ω–∏": "—Å–æ—Ä—è–Ω", "–∏–∑–≤–∏–Ω–∏—Ç–µ": "–ø—Ä–æ–µ—Ö–∞–ª–∏",
            "–¥–æ–º–∞": "–Ω–∞ —Ö–∞—Ç–µ", "—Ä–∞–±–æ—Ç–∞": "—Ç–µ–º–∫–∞", "–¥–µ–Ω—å–≥–∏": "–±–∞–±–∫–∏", "–ø—Ä–æ–±–ª–µ–º–∞": "–∫–æ—Å—è–∫",
            "–±–µ—Ä–∏": "—Ö–∞–ø–∞–π", "–∏–¥–∏": "—Ç–æ–ø–∞–π",
            "–ª—é–¥–∏": "–ø–∞—Ü–∞–Ω—ã", "—á–µ–ª–æ–≤–µ–∫": "–ø–µ—Ä—Å", "–∂–¥—É": "—Ç–æ—Ä—á—É", "–ø–æ—à–ª–∏": "–ø–æ–≥–Ω–∞–ª–∏",
            "–ø–æ—Ö–æ–∂–µ": "–ø–æ—Ö", "–ø–æ–Ω—è–ª": "–≤—Ä—É–±–∏–ª—Å—è", "–Ω–µ –ø–æ–Ω—è–ª": "—á—ë –∑–∞ —Ö—É–π–Ω—è", "–±—ã—Å—Ç—Ä–æ": "–Ω–∞ —à—É—Ö–µ—Ä–µ",
            "—Ç–∏—Ö–æ": "–ø–æ-—Ç–∏—Ö–æ–º—É", "–≥—Ä–æ–º–∫–æ": "–Ω–∞ –≤—Å—é –∫–∞—Ç—É—à–∫—É", "–ø–æ–∑–∂–µ": "–ø–æ—Ç–æ–º –ø—Ä–∏–∫–∏–Ω–µ–º",
            "—Å–µ–π—á–∞—Å": "–ø–æ—Ö–µ—Ä —â–∞", "–∑–∞–≤—Ç—Ä–∞": "–Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫–µ", "—Å–µ–≥–æ–¥–Ω—è": "–ø–æ —Å–µ–π –¥–µ–Ω—å",
            "–µ—Å—Ç—å": "–≤ –Ω–∞–ª–∏—á–∏–∏", "—Ö–æ—á—É": "–∑–∞–≥–æ–Ω", "–Ω–∞–¥–æ": "–≤—Ç—Ä—ã–Ω–¥–µ—Ü",
            "—Å–¥–µ–ª–∞–ª": "–∑–∞–±–∞—Ü–∞–ª", "–≥–æ—Ç–æ–≤–æ": "–ø—Ä–æ–∫–∞—Ç–∏–ª–æ", "–∫–ª–∞—Å—Å": "–±–æ–º–±–∞", "–∫—Ä—É—Ç–æ": "–æ—Ö—É–µ–Ω–Ω–æ",
            "–≥–¥–µ": "—Ö–¥–µ", "–∑–∞—á–µ–º": "–Ω–∞—Ö—É—è",
            "–ø–æ—á–µ–º—É": "—á—ë–∑–∞–Ω–∞—Ö", "–≤–æ–ø—Ä–æ—Å": "—Ç–µ–º–∞", "–æ—Ç–≤–µ—Ç": "–æ—Ç–º–∞–∑–∫–∞", "–±–µ—Ä–∏": "–≥—Ä–µ–±–∞–Ω—É–ª",
            "–¥–∞–≤–∞–π": "–≤–∞–ª–∏ –¥–∞–≤–∞–π", "–±–µ—Ä–∏": "—Ö–≤–∞—Ç–∞–π", "—É–π–¥–∏": "—Å—ä–µ–±–∏"
        }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self._me = await client.get_me()

    def _get_frequency_prob(self):
        frequency_idx = self.config["effects_frequency"]
        if frequency_idx == 0: return 0.15
        if frequency_idx == 1: return 0.35
        if frequency_idx == 3: return 0.85
        if frequency_idx == 4: return 1.00
        return 0.65

    def _transform_patriotic_letters(self, text):
        eng_to_rus = {
            'a': '–∞', 'A': '–ê', 'b': '–±', 'B': '–ë', 'c': '—Å', 'C': '–°', 'd': '–¥', 'D': '–î',
            'e': '–µ', 'E': '–ï', 'f': '—Ñ', 'F': '–§', 'g': '–≥', 'G': '–ì', 'h': '—Ö', 'H': '–•',
            'i': '–∏', 'I': '–ò', 'j': '–π', 'J': '–ô', 'k': '–∫', 'K': '–ö', 'l': '–ª', 'L': '–õ',
            'm': '–º', 'M': '–ú', 'n': '–Ω', 'N': '–ù', 'o': '–æ', 'O': '–û', 'p': '–ø', 'P': '–ü',
            'r': '—Ä', 'R': '–†', 's': '—Å', 'S': '–°', 't': '—Ç', 'T': '–¢', 'u': '—É', 'U': '–£',
            'v': '–≤', 'V': '–í', 'x': '—Ö', 'X': '–•', 'y': '—É', 'Y': '–£', 'z': '–∑', 'Z': '–ó',
            'q': '–∫', 'Q': '–ö', 'w': '–≤', 'W': '–í'
        }
        for eng, rus in eng_to_rus.items():
            text = text.replace(eng, rus)
        text = text.replace('–∑', 'Z').replace('–ó', 'Z').replace('–≤', 'V').replace('–í', 'V').replace('–æ', 'O').replace('–û', 'O')
        return text

    def _transform_exclamations(self, ending_punctuation):
        def replace_match(match): return random.choice(self.extended_exclamations)
        return re.sub(r"!", replace_match, ending_punctuation)

    def _transform_slang(self, text):
        if self.config["enable_slang"]:
            words = text.split()
            transformed_words = []
            for word in words:
                word_lower = word.lower()
                if word_lower in self.slang_dict:
                    new_word = self.slang_dict[word_lower]
                    if word[0].isupper():
                        new_word = new_word.capitalize()
                    transformed_words.append(new_word)
                else:
                    transformed_words.append(word)
            return " ".join(transformed_words)
        return text

    def _apply_patriotic_transformations(self, text):
        if not text.strip():
            return text

        effects_prob = self._get_frequency_prob()

        text = self._transform_slang(text)
        text = self._transform_patriotic_letters(text)

        sentences = re.split(r'([.!?]+\s*)', text)
        result_parts = []

        for i in range(0, len(sentences), 2):
            sentence_part = sentences[i].strip() if i < len(sentences) else ""
            ending_punctuation = sentences[i+1] if i+1 < len(sentences) else ""

            if not sentence_part and ending_punctuation:
                if "!" in ending_punctuation:
                    ending_punctuation = self._transform_exclamations(ending_punctuation)
                result_parts.append(ending_punctuation)
                continue
            
            if not sentence_part and not ending_punctuation:
                continue

            words = sentence_part.split()
            processed_words = []
            for w in words:
                if not w:
                    processed_words.append(w)
                    continue
                word_with_effects = w
                if random.random() < effects_prob:
                    word_with_effects += f" {random.choice(self.flags)}"
                if self.config["enable_emojis"] and random.random() < effects_prob:
                    word_with_effects += f" {random.choice(self.emojis)}"
                processed_words.append(word_with_effects)
            sentence_part = " ".join(processed_words).strip()

            if random.random() < effects_prob:
                if sentence_part: 
                    sentence_part += f" {random.choice(self.suffixes)}"
                else: 
                    sentence_part = random.choice(self.suffixes)
                sentence_part = sentence_part.strip()

            result_parts.append(sentence_part)
            result_parts.append(ending_punctuation)
            
        return "".join(result_parts)

    @loader.watcher(tags=["out", "no_commands"])
    async def patriotic_watcher(self, message):
        """–Ø –°–ö–ê–ó–ê–õ –°–û–°–ê–¢–¨ –°–£–ö"""
        if not message.out:
            return

        if not self.config["enable"]:
            return

        try:
            original_text = message.text
            if not original_text:
                return

            modified_text = self._apply_patriotic_transformations(original_text)
            
            if modified_text != original_text:
                await utils.answer(message, modified_text)
                
        except Exception as e:
            logger.error(f"Error in patriotic transformation: {e}")
            error_text = self.strings("error_message").format(original_text)
            await utils.answer(message, error_text)